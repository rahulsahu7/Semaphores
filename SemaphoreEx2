package org.example;

import jdk.jshell.SnippetEvent;

import java.sql.SQLOutput;
import java.util.concurrent.Semaphore;

public class SemaphoreEx2 {
    public static void main(String[] args) {

        int n = 10;

        Semaphore sem3 = new Semaphore(1);
        Semaphore sem4 = new Semaphore(0);
        EvenThread evenThread = new EvenThread(sem3 ,sem4,10);
        OddThread oddThread = new OddThread(sem3,sem4, 10);
        evenThread.start();
        oddThread.start();
        try
        {
            evenThread.join();
            oddThread.join();

        }
        catch (InterruptedException e)
        {
            e.printStackTrace();
        }


    }
}

class EvenThread extends Thread {
    private final Semaphore semaphore;
    private final Semaphore semaphore1;
    private final int N;

    public EvenThread(Semaphore semaphore,Semaphore semaphore1 ,int N) {
        this.semaphore = semaphore;
        this.semaphore1 = semaphore1;
        this.N = N;
    }

    @Override
    public void run() {
        for (int i = 0; i < N; i+= 2) {
            try {
                semaphore.acquire();
                System.out.println(i);
                semaphore1.release();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }



        }
    }

}

class OddThread extends Thread {
    private final Semaphore semaphore;
    private final Semaphore semaphore1;
    private final int N;

    public OddThread(Semaphore semaphore, Semaphore semaphore1,int N) {
        this.semaphore = semaphore;
        this.semaphore1 = semaphore1;
        this.N = N;
    }



    @Override
    public void run() {
        for (int j = 1; j < N; j+=2) {

        try {
            semaphore1.acquire();
            System.out.println(j);
            semaphore.release();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }


        }
    }
}

// Q. You are given two threads, one responsible for printing even numbers and the other responsible for printing odd numbers. Your task is to implement a program that prints the numbers from 1 to N, where N is a given positive integer.
// The two threads should take turns printing the numbers in an alternating fashion: first the even thread prints an even number, then the odd thread prints an odd number, and so on.
